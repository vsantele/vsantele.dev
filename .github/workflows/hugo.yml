# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to VPS

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.101.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --minify \
            --baseURL "${{ env.BASE_URL }}/"
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: public
      
  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build result for job build
        uses: actions/download-artifact@v3
        with:
          name: build
          path: public
      - name: deploy-via-scp
        uses: horochx/deploy-via-scp@1.1.0
        with:
          # Local file path
          local: public/*
          # Remote file path
          remote: /var/www/vsantele.dev/
          # Remote server address
          host: ${{ secrets.HOST }}
          # Remote server port
          port: ${{ secrets.PORT }}
          # Remote server user
          user: ${{ secrets.USERNAME }}
          # Remote server private key
          key: ${{ secrets.SSHKEY }}
          # Ensure the existance of the remote file path
          ensureRemote: true

